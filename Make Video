import numpy as np
import matplotlib.pyplot as plt
import moviepy.editor as mp

def get_z_frame():
    global lapse, w, u, dt, t, z, v
    centre = -2 

    step = 0
                      
    while step*dt <= lapse:
        #Increase w and t, set position of the central oscillator
        step += 1
        t += dt
        z[centre, centre] = np.sin(w*t)
        
        #Find estimates of next v and z
        a = np.roll(z,1,1) + np.roll(z,-1,1) + np.roll(z,1,0) + np.roll(z,-1,0) - 4*z - u*v
        vE_next = v + a*dt
        zE_next = z + v*dt
        
        #Clean up boundaries and correct position of the central oscillator
        zE_next[0]=zE_next[1]
        zE_next[-1]=zE_next[:,-3]
        zE_next[:,0]=zE_next[:,1]
        zE_next[:,-1]=zE_next[-3]
        zE_next[centre, centre] = np.sin(w*(t+dt))
        
        #Find next v and z using Heun method        
        aE_next = (np.roll(zE_next,1,1) + np.roll(zE_next,-1,1) + np.roll(zE_next,1,0) + np.roll(zE_next,-1,0)
                   - 4*zE_next - u*vE_next)
        vH_next = v + 0.5*(a+aE_next)*dt
        zH_next = z + 0.5*(v+vE_next)*dt
        
        #Set v and z for the next step
        v = vH_next
        z = zH_next
        
        #Clean up boundaries
        z[0]=z[1]
        z[-1]=z[:,-3]
        z[:,0]=z[:,1]
        z[:,-1]=z[-3]
        
    step = 0
    
    z_frame = z[1:-1,1:-1]
    z_frame = np.append(z_frame, np.fliplr(z_frame)[:,1:], axis=1)
    z_frame = np.append(z_frame, np.flipud(z_frame)[1:], axis=0)
    
    return z_frame

def make_frame(second):
    z_frame = get_z_frame()
    intensifier = min(255, 255/np.max(z_frame))*colour_intensifier
    high = z_frame.clip(min=0)*intensifier
    high = np.minimum(high, 255)
    low = -z_frame.clip(max=0)*intensifier
    low = np.minimum(low, 255)
    red = 255-high
    green =255-high-low
    blue = 255-low
    
    col = np.array([red, green, blue])
    col = col.swapaxes(0,2)

    tile_size = int(500/N)
    col = np.repeat(col, tile_size, 0)
    col = np.repeat(col, tile_size, 1)
 
    return col

###############################################################

N = 20 #Size of the plate, NxN oscillators
lapse = 1 #Simulaton time at which a frame is made
dt = 0.01 #Time-step
w = 0.1 #Oscillation frequency of the central oscillator
u = 0.01 #Viscous friction

fps = 50 #Video FPS
duration = 10 #Video duration in seconds
colour_intensifier = 0.5 #Controls colour intensity
file_name = '{0}x{0} at {1}'.format(N, w)

###############################################################

N = int(N/2)+3
z = np.zeros((N,N))
v = np.zeros((N,N))
t = 0

animation = mp.VideoClip(make_frame, duration=duration)
animation.write_videofile(file_name+'.avi', fps=fps, codec='png')
